!=================================================================!
!                   AdvCompLab - Group Project:                   !
!             INTERACTION SIMULATION OF MgO AND CaO.              !
!=================================================================!
! A users guide for the tools created for this project.           !
! Created by:                                                     !
!=================================================================!
!
!  Section 1 - Unit cell creation/Initialisation
!            a) code
             a) use
!  
!  Section 2 - Computer modelling
!
!  Section 3 - Analysis and Visualisation 
!
!  Section 4 - TODO
!
!=================================================================!
!                          SECTION 1  (Aaron)                     ! 
!=================================================================!

a) Code
                                                       
!-----------------------------------------------------------------!
Source Code:  rnd_num.f90
Dependencies: None
Language:     Fortran 95
!-----------------------------------------------------------------!
This module contains a function and a subroutine:

     + - rnd(): Function that returns a random number in the range [0,1] (real,kind=dp).  

     + - init_random_seed(): Subroutine taken from the GNU Fortran example: (https://gcc.gnu.org/onlinedocs/gfortran/RANDOM_005fSEED.html) and seeds the andom number generator. It must be called at some point in the code BEFORE rnd() is executed.


!-----------------------------------------------------------------!
Sorce Code:   input_create.f90
Dependencies: rnd_num.f90
Language:     Fortran 95
!-----------------------------------------------------------------!
This is the main program for the unit cell creation. The user is asked to input:

	+ - The percentage of desired Ca [0,1].

	+ - The kpoint_mp_spacing value (Discussed later).

The code operates as follows:

The code first generates an array with dimensions 3x3x3, then assigns an integer to each lattice point. The values of the integer assigned can take two values, each representing a atom_kind (i.e. what type of atom is allowed to be placed at the location): 1 represents Oxygen, 2 represents MgO or CaO. The final array will have an atomic model of a rocksalt crystal.

Then the atoms vector locations (u,v,w) are written to file. The code then loops over all elements, checking their integer value. If the element value is 2 the code then uses the rnd() function to choose an atom at random (either Mg,Ca). The probability of this is controlled by a conditional the user entered for desired percentage (p). The code initially places an oxygen atom at the (0,0,0) location, then as each atom is placed, it updates the u,v,w coordinates for atoms being placed (by a distance delta).

The final output is a .cell file that can be immediately processed by CASTEP.

b) Using the code

The user must have input_file.f90 and rnd_num.f90 in the same directory. The code can be compiled with the command:

    gfortran rnd_num.f90 input_creator.f90 -Wall -march=native

The executable a.out will be produced. This can be given execute permission by issuing the command:

    chmod +X a.out

The executable can be run by typing:

    ./a.out

and will then be prompted to enter a value for the desired percentage of Ca. The value entered must be within the range [0,1]. This value is used in a conditional to test when placing a Mg/Ca atom at a vector location - it will not necessarily be exact once the cell is generated; the Ca % is written the screen once the code has executed and should be compared to the desired value.

The user is then asked to input a value for kpoints_mp_spacing. This can be thought of as the dx in numerical integration. It can be varied to find an accurate convergence value, while still being computationally cheap. A value of 1 or below is desirable.

Once completed the MgO.cell file will e ready for use in CASTEP.

!=================================================================!
!                          SECTION 2                              ! 
!=================================================================!

!-----------------------------------------------------------------!
Source Code:  cutoff.sh
Dependencies: None
Language:     Bash
!-----------------------------------------------------------------!
This shell script must be in the same directory as castep.mpi and an MgO.cell file.

It will then run print out a MgO.param file with an initial cut-off energy of 200. It will then run CASTEP for that parameter file and then using grep and awk, output the cut-off energy and the final calculated ground-state energy to a data file named finalE.dat. This process is in a do loop and will iterate for cut-off energies in the range 200-550eV.

!=================================================================!
!                          SECTION 3   (Ryan)                     ! 
!=================================================================!
!-----------------------------------------------------------------!
Source Code:  run_visualize.sh
Dependencies: Visualize_Cell.py - Language: Python
Language:     Bash
!-----------------------------------------------------------------!
This shell script must be in the same directory as Visualize_Cell.py and all MgO$.cell files where $ represents the number of Ca atoms replacing Mg atoms.

This shell script is currently set to run for the results specific to this experiment. This script will feed the file name to Visualize_Cell.py which is based on the python code provided at the start of this experiment of the same name. Creates a 3D image of the unit cell using the visual library and the information in the .cell file being read. The only current known method for writing this image to file is to screen shot that window. Automation of the screen shot was attempted using the PyQt4 module. This method was found to be the most simple to implement but may only be used reliably in Linux system, some cases this method may be successful in Windows. 

This method was intialy tested before addition to Visualize_Cell.py and was proven to take screen shot as intended. Once incorperated into Visualize_Cell.py multiple errors occured causing the vpython window and then the Visualize_Cell.py program to stop responding. This issue is currently unresolved, the code has been left in as comments for future attempts to resolve the issue.

